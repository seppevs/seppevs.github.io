{"componentChunkName":"component---src-templates-blog-post-js","path":"/working-effectively-with-test-data-in-javascript/","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<h2>Introduction</h2>\n<p>This posts will show how you can keep your test code clean by using a builder to generate your test data.</p>\n<h2>The Problem</h2>\n<p>Imagine we have an model <em>Movie</em> where we store:</p>\n<ul>\n<li>title</li>\n<li>director</li>\n<li>rating</li>\n<li>genre</li>\n<li>year</li>\n</ul>\n<p>We need to test &#x26; implement a Movie Service where we expose 2 functions:</p>\n<ul>\n<li><code>getTitlesByGenre(genre)</code></li>\n<li><code>getTitlesByDirector(director)</code></li>\n</ul>\n<p>In the <code>getTitlesByGenre()</code> function, only the  <em>genre</em> and <em>title</em> attributes are relevant. <br />In the <code>getTitlesByDirector()</code> function, only the <em>title</em> and <em>director</em> are important.</p>\n<p>While I prefer to work with full blown movie objects in my tests, I only want to specify the values of the attributes that really matter to my test. This is something I typically solve by creating a <em>movieBuilder</em></p>\n<h2>Generating Test Data</h2>\n<h3>movieBuilder.js</h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nvar chance = require('chance').Chance();\nvar _ = require('lodash');\n\nmodule.exports = {\n  movie: movie,\n  movieWith: movieWith\n};\n\nfunction movie() {\n  return {\n    title: chance.sentence({words: chance.natural({min: 1, max: 3})}),\n    director: chance.first() + ' ' + chance.last(),\n    rating: chance.floating({min: 0, max: 9, fixed: 1}),\n    genre: randomOf('Thriller', 'Action', 'Comedy', 'Mystery', 'Romance'),\n    year: chance.natural({min: 1950, max: 2016})\n  }\n}\n\nfunction movieWith(override) {\n  return _.merge(movie(), override);\n}\n\nfunction randomOf() {\n  var args = Array.prototype.slice.call(arguments);\n  return args[Math.floor(Math.random() * args.length)];\n}\n</code></pre>\n<p>This module provides 2 functions to create complete or partial randomized movie objects:</p>\n<ul>\n<li><code>movie()</code> creates a movie object where all its attributes are randomized. It uses <a href=\"http://chancejs.com/\">chance</a> to generate realistic random data.</li>\n<li><code>movieWith()</code> creates a movie object with all its attributes randomized, except for those specified in the <em>override</em> argument.</li>\n</ul>\n<p>An example of invoking <code>movie()</code></p>\n<pre><code class=\"language-javascript\">> movie()\n{ title: 'Wasudfab be lezun.',\n  director: 'Joe Pratt',\n  rating: 7.5,\n  genre: 'Comedy',\n  year: 1995 }\n</code></pre>\n<p>And an example of invoking <code>movieWith(override)</code></p>\n<pre><code class=\"language-javascript\">> movieWith({title: 'The Loft'})\n{ title: 'The Loft',\n  director: 'Scott Torres',\n  rating: 4.5,\n  genre: 'Mystery',\n  year: 2004 }\n</code></pre>\n<p>Let's see now how we can benefit from this in our tests:</p>\n<h3>movieServiceTest.js</h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nvar expect = require('chai').expect;\nvar movieService = require('../lib/movieService');\n\nvar movie = require('./movieBuilder').movie;\nvar movieWith = require('./movieBuilder').movieWith;\n\ndescribe('movieService', function() {\n\n  it('should be possible to get a list of titles by genre', function() {\n    movieService.movies = [\n      movieWith({title: 'Django Unchained', genre: 'Western'}),\n      movieWith({title: 'Lost Highway', genre: 'Mystery'}),\n      movieWith({title: 'The Hateful Eight', genre: 'Western'}),\n      movieWith({title: 'Terminator 2', genre: 'Action'}),\n    ];\n\n    expect(movieService.getTitlesByGenre('Western'))\n      .to.have.length(2)\n      .and.to.contain('Django Unchained', 'The Hateful Eight');\n  });\n\n  it('should be possible to get a list of titles by director', function() {\n    movieService.movies = [\n      movieWith({title: 'Casino', director: 'Martin Scorsese'}),\n      movieWith({title: 'Corpse Bride', director: 'Tim Burton'}),\n      movieWith({title: 'Django Unchained', director: 'Quentin Tarantino'}),\n      movieWith({title: 'Taxi Driver', director: 'Martin Scorsese'}),\n      movieWith({title: 'The Hateful Eight', director: 'Quentin Tarantino'}),\n      movieWith({title: 'Raging Bull', director: 'Martin Scorsese'}),\n    ];\n\n    expect(movieService.getTitlesByDirector('Martin Scorsese'))\n      .to.have.length(3)\n      .and.to.contain('Casino', 'Taxi Driver', 'Raging Bull');\n  });\n\n});\n</code></pre>\n<p>The <code>movieWith()</code> function allows us to specify only the data relevant to the functionality we're implementing.\nAll other data is randomized. It keeps the test code clean and readable.</p>\n<p>For completeness, here is a possible implementation (and the <code>package.json</code> file):</p>\n<h3>movieService.js</h3>\n<pre><code class=\"language-javascript\">'use strict';\n\nmodule.exports = {\n  movies: [],\n\n  getTitlesByGenre: function (genre) {\n    return this.movies\n      .filter(function (movie) {\n        return movie.genre === genre;\n      })\n      .map(toTitle);\n  },\n\n  getTitlesByDirector: function(director) {\n    return this.movies\n      .filter(function (movie) {\n        return movie.director === director;\n      })\n      .map(toTitle);\n  }\n};\n\nfunction toTitle(movie) {\n  return movie.title;\n}\n</code></pre>\n<h3>package.json</h3>\n<pre><code class=\"language-javascript\">{\n  \"name\": \"test-builders\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"author\": \"Sebastian Van Sande\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"chai\": \"^3.5.0\",\n    \"chance\": \"^0.8.0\"\n  },\n  \"dependencies\": {\n    \"lodash\": \"^4.2.1\"\n  }\n}\n</code></pre>\n<p>All code of this blog post is <a href=\"https://github.com/seppevs/seppevs.github.io/tree/master/code-samples/working_effectively_with_test_data_in_javascript/test-builders\">available on github</a></p>","frontmatter":{"title":"Working effectively with test data in JavaScript"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/working-effectively-with-test-data-in-javascript/"}}}